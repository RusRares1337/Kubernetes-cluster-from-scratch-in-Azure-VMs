- hosts: all
  become: yes
  tasks:
    - fail:
       msg: "OS should be Ubuntu 22.04, not {{ ansible_distribution }} {{ ansible_distribution_version }}"
      when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '22.04'

    - name: update APT packages
      apt:
        update_cache: yes


    - name: disable SWAP (Kubeadm requirement)
      shell: |
        swapoff -a

    - name: disable SWAP in fstab (Kubeadm requirement)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: create an empty file for Kubernetes sysctl params
      copy:
        content: ""
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        force: no

    - name: configure sysctl params for Kubernetes
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: "{{ item }}"
      with_items:
        - 'net.bridge.bridge-nf-call-iptables  = 1'
        - 'net.ipv4.ip_forward                 = 1'
        - 'net.bridge.bridge-nf-call-ip6tables = 1'

    - name: apply sysctl params without reboot
      command: sysctl --system

    - name: install APT Transport HTTPS
      apt:
        name: apt-transport-https
        state: present

    - name: add Docker apt-key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add Docker's APT repository
      apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        filename: "docker-{{ ansible_distribution_release }}"

    - name: Install Docker 23.0.1-1
      ansible.builtin.apt:
        name:
          - docker-ce=5:23.0.1-1~ubuntu.22.04~jammy
          - docker-ce-cli=5:23.0.1-1~ubuntu.22.04~jammy
          - containerd.io
        state: present
        update_cache: true

    - name: add Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: add Kubernetes' APT repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: 'kubernetes'

    - name: Setup docker user
      ansible.builtin.user:
        name: docker
        groups: "docker"
        append: true
        sudo_user: yes

    - name: Install Docker module for Python
      ansible.builtin.pip:
        name: docker

    - name: Install Docker-Compose&Set Permission
      ansible.builtin.get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '755'

    - name: Create Docker-Compose symlink
      ansible.builtin.command:
        cmd: ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        creates: /usr/bin/docker-compose

    - name: Add private registry
      ansible.builtin.template:
        src: daemon.j2
        dest: /etc/docker/daemon.json
        mode: preserve

    - name: Restart Docker
      ansible.builtin.service:
        name: docker
        state: restarted
        enabled: true

    - name: install Kubelet
      apt:
        name: kubelet=1.26.*
        state: present
        update_cache: true

    - name: install Kubeadm
      apt:
        name: kubeadm=1.26.*
        state: present

    - name: enable the Kubelet service, and enable it persistently
      service:
        name: kubelet
        enabled: yes

    - name: load br_netfilter kernel module
      modprobe:
        name: br_netfilter
        state: present

    - name: set bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1

    - name: set ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: check Kubelet args in Kubelet config
      shell: grep "^Environment=\"KUBELET_EXTRA_ARGS=" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf || true
      register: check_args

    - name: add runtime args in Kubelet config
      lineinfile:
        dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
        line: "Environment=\"KUBELET_EXTRA_ARGS= --runtime-cgroups=/system.slice/containerd.service --container-runtime-endpoint=unix:///run/containerd/containerd.sock\""
        insertafter: '\[Service\]'
      when: check_args.stdout == ""


- hosts: master
  become: yes
  tasks:
    - name: install Kubectl
      apt:
        name: kubectl=1.26.*
        state: present
        force: yes # allow downgrades